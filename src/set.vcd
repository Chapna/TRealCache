$date
	Wed Mar  4 22:14:38 2015
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module set_t $end
$var wire 16 ! data_out [0:15] $end
$var wire 1 " dirty $end
$var wire 1 # hit $end
$var wire 5 $ tag_out [0:4] $end
$var wire 1 % valid $end
$var reg 1 & cmp $end
$var reg 16 ' data_in [0:15] $end
$var reg 1 ( enable $end
$var reg 5 ) tag [0:4] $end
$var reg 2 * word [0:1] $end
$var reg 1 + write $end
$scope module st $end
$var wire 1 , comp $end
$var wire 16 - data_in [0:15] $end
$var wire 1 . enable $end
$var wire 1 / rst $end
$var wire 5 0 tag_in [0:4] $end
$var wire 1 1 valid_in $end
$var wire 2 2 word [0:1] $end
$var wire 1 3 write $end
$var reg 16 4 data_out [0:15] $end
$var reg 1 5 dirty $end
$var reg 1 6 dirty_out $end
$var reg 1 7 hit $end
$var reg 5 8 tag [0:4] $end
$var reg 5 9 tag_out [0:4] $end
$var reg 1 : valid $end
$var reg 1 ; valid_out $end
$scope begin genblk1 $end
$scope module blk_ins $end
$var wire 16 < data_in [0:15] $end
$var wire 1 = enable $end
$var wire 1 > write $end
$var reg 16 ? data [0:15] $end
$var reg 16 @ data_out [0:15] $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module blk_ins $end
$var wire 16 A data_in [0:15] $end
$var wire 1 B enable $end
$var wire 1 C write $end
$var reg 16 D data [0:15] $end
$var reg 16 E data_out [0:15] $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module blk_ins $end
$var wire 16 F data_in [0:15] $end
$var wire 1 G enable $end
$var wire 1 H write $end
$var reg 16 I data [0:15] $end
$var reg 16 J data_out [0:15] $end
$upscope $end
$upscope $end
$scope begin genblk0001 $end
$scope module blk_ins $end
$var wire 16 K data_in [0:15] $end
$var wire 1 L enable $end
$var wire 1 M write $end
$var reg 16 N data [0:15] $end
$var reg 16 O data_out [0:15] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx O
bx N
0M
0L
bz K
bx J
bx I
zH
zG
bz F
bx E
bx D
zC
zB
bz A
bx @
bx ?
z>
z=
bz <
x;
0:
bx 9
bx 8
07
x6
05
bx 4
x3
b11 2
01
b11101 0
0/
0.
b111100001111 -
x,
x+
b11 *
b11101 )
0(
b111100001111 '
x&
x%
bx $
0#
x"
bx !
$end
#50
b111100001111 O
b111100001111 N
1L
1M
b111100001111 K
b11101 8
0&
0,
1+
13
1(
1.
#100
0M
0L
0(
0.
#150
06
0"
0;
0%
1L
b111100001111 4
b111100001111 !
17
1#
1&
1,
0+
03
1(
1.
#250
